--setup private favors tables
--using id=6 to indicate that a user has been deleted to prevent issues

--types
create type favor_type as enum ('rides', 'academic', 'food');
create type favor_status as enum ('open', 'closed', 'in progress', 'in review');

create table private.favors_transactions (
  f_id int generated by default as identity primary key,
  poster_id int default 6 references public.profiles on delete set default not null,
  completer_id int default 6 references public.profiles on delete set default not null,

  constraint same_user check (poster_id != completer_id or poster_id = 6)
);

alter table private.favors_transactions enable row level security;

--all user inputted information for favors
create table private.favors_user (
  f_id int references private.favors_transactions on delete cascade not null primary key,
  num_karma int not null,
  f_type favor_type not null,
  title text not null,
  description text not null,
  f_img_url text,

  constraint zero_karma check (num_karma > 0),
  constraint empty_title check (char_length(title) > 0),
  constraint empty_desc check (char_length(description) > 0)
);

alter table private.favors_user enable row level security;

--all server-inputted information for favors
create table private.favors_server (
  f_id int references private.favors_transactions on delete cascade not null primary key,
  posted_at timestamp with time zone not null,
  completed_at timestamp with time zone,
  reviewed_at timestamp with time zone,
  f_status favor_status not null
);

alter table private.favors_server enable row level security;

--add dummy data here