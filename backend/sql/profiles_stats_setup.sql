-- Create a table for public profiles
create table profiles (
  id int generated by default as identity primary key,
  uid uuid references auth.users on delete cascade not null,
  full_name text not null,
  pronouns text,
  about_me text,
  avatar_url text not null,
  updated_at timestamp with time zone not null,

  constraint full_name_length check (char_length(full_name) > 0)
);

-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = uid);


-- stats setup

create table stats (
  id int references public.profiles on delete cascade not null primary key,
  karma int default 1000,
  helped int default 0
);

alter table stats
  enable row level security;

-- updates can only happen through a security definer function
create policy "Stats are viewable by everyone." on stats
  for select using (true);

-- Trigger to create a stats entry when there has been an insert on profiles
create or replace function public.insert_stats()
returns trigger as $$
begin
  insert into public.stats (id)
  values (new.id);
  return new;
end;
$$ language plpgsql security definer;
create trigger on_profile_insert_stats
  after insert on public.profiles
  for each row execute procedure public.insert_stats();
  

--Add existing rows from auth.users
do
$$
declare
  row record;
begin
  for row in select id, created_at, raw_user_meta_data
    from auth.users 
    order by raw_user_meta_data->>'full_name'
  loop 
    insert into public.profiles (uid, updated_at, full_name, avatar_url)
    values (row.id, row.created_at, row.raw_user_meta_data->>'full_name', 'TODO: add default avatar url');
  end loop;
end;
$$;

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (uid, updated_at, full_name, avatar_url)
  values (new.id,
          new.created_at,
          new.raw_user_meta_data->>'full_name',
          'TODO: add default avatar url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

